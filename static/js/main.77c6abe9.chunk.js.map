{"version":3,"sources":["AppContext.js","components/Textarea/index.js","components/Button/index.js","components/Icons/icon.js","components/Icons/ChevronLeft.js","components/Icons/ChevronRight.js","containers/uri/index.js","containers/SideBar/index.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","displayName","Textarea","onChange","props","e","target","value","Button","children","outline","className","classnames","button","defaultProps","Icon","classNames","width","height","fill","focusable","ChevronLeft","viewBox","fillRule","d","ChevronRight","URI","useContext","appData","onChangeAppData","uriData","uri","decodedData","encodedData","onChangeEncoded","onChangeDecoded","onClick","encodeURIComponent","decodeURIComponent","tools","label","url","SideBar","map","to","App","useState","setAppData","Provider","id","data","path","Boolean","window","location","hostname","match","container","document","getElementById","ReactDOM","render","StrictMode","debugContextDevtool","debugReducer","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77c6abe9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext({});\n\nAppContext.displayName = \"AppData\";\n\nexport default AppContext;\n","import React from \"react\";\n\nimport \"./index.scss\";\n\nconst Textarea = ({ onChange, ...props }) => {\n  return (\n    <textarea onChange={e => onChange(e.target.value)} {...props} />\n  );\n};\n\nexport default Textarea;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nimport \"./index.scss\";\n\nconst Button = ({ children, outline, className, ...props }) => {\n  return (\n    <button\n      className={classnames(\n        {\n          button: true,\n          outline,\n        },\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  outline: false,\n};\n\nexport default Button;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./index.scss\";\n\nconst Icon = ({ children, className, ...props }) => {\n  return (\n    <svg\n      className={classNames(\"icon\", className)}\n      width=\"1em\"\n      height=\"1em\"\n      fill=\"currentColor\"\n      focusable=\"false\"\n      {...props}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Icon from \"./icon\";\n\nconst ChevronLeft = (props) => {\n  return (\n    <Icon {...props} viewBox=\"0 0 16 16\">\n      <path\n        fillRule=\"evenodd\"\n        d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"\n      />\n    </Icon>\n  );\n};\n\nexport default ChevronLeft;\n","import React from \"react\";\nimport Icon from \"./icon\";\n\nconst ChevronRight = (props) => {\n  return (\n    <Icon {...props} viewBox=\"0 0 16 16\">\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"\n      />\n    </Icon>\n  );\n};\n\nexport default ChevronRight;\n","import React, { useContext } from \"react\";\n\nimport Textarea from \"../../components/Textarea\";\nimport Button from \"../../components/Button\";\nimport ChevronLeft from \"../../components/Icons/ChevronLeft\";\nimport ChevronRight from \"../../components/Icons/ChevronRight\";\n\nimport AppContext from \"../../AppContext\";\n\nimport \"./index.scss\";\n\nconst URI = () => {\n  const { appData, onChangeAppData } = useContext(AppContext);\n\n  const uriData = appData.uri || {};\n\n  const { decodedData = \"\", encodedData = \"\" } = uriData;\n\n  const onChangeEncoded = (value) => {\n    onChangeAppData(\"uri\", {\n      ...uriData,\n      encodedData: value,\n    });\n  };\n\n  const onChangeDecoded = (value) => {\n    onChangeAppData(\"uri\", {\n      ...uriData,\n      decodedData: value,\n    });\n  };\n\n  const onClickEncode = () => {\n    onChangeEncoded(encodeURIComponent(decodedData));\n  };\n\n  const onClickDecode = () => {\n    onChangeDecoded(decodeURIComponent(encodedData));\n  };\n\n  return (\n    <section className=\"app uri-app\">\n      <div className=\"uri-section\">\n        <h3>Encoded</h3>\n        <div className=\"input-area\">\n          <Textarea value={encodedData} onChange={onChangeEncoded} />\n        </div>\n      </div>\n      <div className=\"action-section\">\n        <Button onClick={onClickEncode}>\n          <ChevronLeft className=\"button-icon-left\" /> Encode\n        </Button>\n        <Button onClick={onClickDecode}>\n          Decode <ChevronRight className=\"button-icon-right\" />\n        </Button>\n      </div>\n      <div className=\"uri-section\">\n        <h3>Decoded</h3>\n        <div className=\"input-area\">\n          <Textarea value={decodedData} onChange={onChangeDecoded} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default URI;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./index.scss\";\n\nconst tools = [\n  {\n    label: \"URI\",\n    url: \"uri\",\n  },\n];\n\nconst SideBar = () => {\n  return (\n    <aside className=\"sidebar\">\n      {tools.map(({ label, url }) => {\n        return <NavLink className=\"menu-item\" to={url}>{label}</NavLink>;\n      })}\n    </aside>\n  );\n};\n\nexport default SideBar;\n","import React, { useState } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport AppContext from \"./AppContext\";\n\nimport URI from \"./containers/uri\";\nimport SideBar from \"./containers/SideBar\";\n\nfunction App() {\n  const [appData, setAppData] = useState({});\n\n  const onChangeAppData = (id, data) => {\n    setAppData({\n      ...appData,\n      [id]: data,\n    });\n  };\n\n  return (\n    <Router>\n      <AppContext.Provider value={{ appData, onChangeAppData }}>\n        <SideBar />\n        <Switch>\n          <Route path=\"/uri\">\n            <URI />\n          </Route>\n          <Redirect to=\"/uri\" />\n        </Switch>\n      </AppContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { debugContextDevtool } from 'react-context-devtool';\n\nimport './index.scss';\n\nconst container = document.getElementById(\"root\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  container\n);\n\ndebugContextDevtool(container, {\n  debugReducer: false,\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}